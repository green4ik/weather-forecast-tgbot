package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type WeatherResponse struct {
	Name string `json:"name"`
	Main struct {
		Temp     float64 `json:"temp"`
		Humidity int     `json:"humidity"`
	} `json:"main"`
	Weather []struct {
		Main        string `json:"main"`
		Description string `json:"description"`
	} `json:"weather"`
}

type ForecastResponse struct {
	List []struct {
		Dt   int64 `json:"dt"`
		Main struct {
			Temp float64 `json:"temp"`
		} `json:"main"`
		Weather []struct {
			Description string `json:"description"`
		} `json:"weather"`
	} `json:"list"`
}

var (
	userCities      = make(map[int64]string)
	userSchedules   = make(map[int64][]string)
	waitingForCity  = make(map[int64]bool)
	waitingForTime  = make(map[int64]bool)
	waitingToRemove = make(map[int64]bool)
	mutex           sync.Mutex
)

func main() {
	telegramToken := os.Getenv("TELEGRAM_TOKEN")
	weatherApiKey := os.Getenv("WEATHER_API_KEY")

	bot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = false
	log.Printf("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —è–∫ %s", bot.Self.UserName)
	go func() {
		http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
			fmt.Fprintln(w, "‚úÖ Bot is running")
		})
		log.Fatal(http.ListenAndServe(":10000", nil)) // Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç—å PORT
	}()

	go startScheduler(bot, weatherApiKey)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		userID := update.Message.Chat.ID
		text := strings.TrimSpace(update.Message.Text)

		if waitingForCity[userID] {
			mutex.Lock()
			userCities[userID] = text
			waitingForCity[userID] = false
			mutex.Unlock()
			bot.Send(tgbotapi.NewMessage(userID, fmt.Sprintf("‚úÖ –ú—ñ—Å—Ç–æ \"%s\" –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", text)))
			continue
		}

		if waitingForTime[userID] {
			mutex.Lock()
			userSchedules[userID] = append(userSchedules[userID], text)
			waitingForTime[userID] = false
			mutex.Unlock()
			bot.Send(tgbotapi.NewMessage(userID, fmt.Sprintf("‚úÖ –ß–∞—Å %s –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ–∑—Å–∏–ª–∫–∏!", text)))
			continue
		}

		if waitingToRemove[userID] {
			mutex.Lock()
			times := userSchedules[userID]
			var newTimes []string
			for _, t := range times {
				if t != text {
					newTimes = append(newTimes, t)
				}
			}
			userSchedules[userID] = newTimes
			waitingToRemove[userID] = false
			mutex.Unlock()
			bot.Send(tgbotapi.NewMessage(userID, fmt.Sprintf("üóë –í–∏–¥–∞–ª–µ–Ω–æ —Ä–æ–∑—Å–∏–ª–∫—É –æ %s", text)))
			continue
		}

		switch text {
		case "/start":
			menu := tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("üìç –ó–∞–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ"),
					tgbotapi.NewKeyboardButton("üå¶ –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É"),
				),
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å"),
					tgbotapi.NewKeyboardButton("üì¨ –†–æ–∑—Å–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É"),
				),
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É"),
				),
			)
			msg := tgbotapi.NewMessage(userID, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é:")
			msg.ReplyMarkup = menu
			bot.Send(msg)

		case "üìç –ó–∞–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ":
			waitingForCity[userID] = true
			bot.Send(tgbotapi.NewMessage(userID, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:"))

		case "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å":
			city, ok := userCities[userID]
			if !ok {
				bot.Send(tgbotapi.NewMessage(userID, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞–¥–∞–π –º—ñ—Å—Ç–æ."))
				continue
			}
			forecast, err := getDailyForecast(city, weatherApiKey)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(userID, "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É."))
				continue
			}
			bot.Send(tgbotapi.NewMessage(userID, forecast))

		case "üå¶ –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É":
			city, ok := userCities[userID]
			if !ok {
				bot.Send(tgbotapi.NewMessage(userID, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞–¥–∞–π –º—ñ—Å—Ç–æ."))
				continue
			}
			weather, err := getWeather(city, weatherApiKey)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(userID, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É."))
				continue
			}
			bot.Send(tgbotapi.NewMessage(userID, weather))

		case "üì¨ –†–æ–∑—Å–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É":
			waitingForTime[userID] = true
			bot.Send(tgbotapi.NewMessage(userID, "–í–≤–µ–¥–∏ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–∑–∞ –ö–∏—î–≤–æ–º):"))

		case "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É":
			mutex.Lock()
			if len(userSchedules[userID]) == 0 {
				mutex.Unlock()
				bot.Send(tgbotapi.NewMessage(userID, "–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏."))
				continue
			}
			waitingToRemove[userID] = true
			sched := strings.Join(userSchedules[userID], ", ")
			mutex.Unlock()
			bot.Send(tgbotapi.NewMessage(userID, "–í–≤–µ–¥–∏ —Ç–æ—á–Ω–∏–π —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏, —è–∫—É —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏:\n"+sched))

		default:
			bot.Send(tgbotapi.NewMessage(userID, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –º–µ–Ω—é."))
		}
	}
}

func getWeather(city string, weatherApiKey string) (string, error) {
	url := fmt.Sprintf("https://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric&lang=ua", city, weatherApiKey)

	resp, err := http.Get(url)
	if err != nil {
		return "", fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: %v", err)
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	var data WeatherResponse
	err = json.Unmarshal(body, &data)
	if err != nil || len(data.Weather) == 0 {
		return "", fmt.Errorf("–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è %s", city)
	}

	text := fmt.Sprintf("üìç –ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ %s:\nüå° %.1f¬∞C\nüíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: %d%%\n‚òÅÔ∏è %s (%s)\n\nüß† –ö–æ–º–µ–Ω—Ç–∞—Ä:\n",
		data.Name, data.Main.Temp, data.Main.Humidity, data.Weather[0].Description, data.Weather[0].Main)

	switch {
	case data.Main.Temp <= -10:
		text += "ü•∂ –ù–∞–¥–≤–æ—Ä—ñ —Ç–∞–∫ —Ö–æ–ª–æ–¥–Ω–æ, —â–æ –Ω–∞–≤—ñ—Ç—å Wi-Fi –∑–∞–º–µ—Ä–∑!"
	case data.Main.Temp <= 0:
		text += "üß• –í–¥—è–≥–∞–π—Å—è —è–∫ –∫–∞–ø—É—Å—Ç–∞ ‚Äî —à–∞—Ä –∑–∞ —à–∞—Ä–æ–º."
	case data.Main.Temp <= 10:
		text += "üåÄ –ö—Ä–∞—â–µ –∑–∞–ª–∏—à–∞–π—Å—è –≤–¥–æ–º–∞ –∑ —á–∞—î–º."
	case data.Main.Temp <= 20:
		text += "üå§ –õ–µ–≥–µ–Ω—å–∫–∏–π —Å–≤–µ—Ç—Ä–∏–∫ –Ω–µ –∑–∞–≤–∞–¥–∏—Ç—å."
	case data.Main.Temp <= 30:
		text += "üòé –Ü–¥–µ–∞–ª—å–Ω–æ! –ô–¥–∏ –ª–æ–≤–∏—Ç–∏ —Å–æ–Ω—Ü–µ."
	default:
		text += "üî• –ù–∞–¥–≤–æ—Ä—ñ –∂–∞—Ä–∫–æ. –¢—Ä–∏–º–∞–π—Å—è –≤ —Ç—ñ–Ω—ñ –π –ø–∏–π –≤–æ–¥—É."
	}

	switch data.Weather[0].Main {
	case "Rain":
		text += "\n‚òî –ü–∞—Ä–∞—Å–æ–ª—è ‚Äî —Ç–≤—ñ–π –Ω–∞–π–∫—Ä–∞—â–∏–π –¥—Ä—É–≥ —Å—å–æ–≥–æ–¥–Ω—ñ."
	case "Snow":
		text += "\n‚ùÑ –ì–æ–ª–æ–≤–Ω–µ ‚Äî –Ω–µ –ª–∏–∑–∞—Ç–∏ –º–µ—Ç–∞–ª–µ–≤—ñ –ø—Ä–µ–¥–º–µ—Ç–∏."
	case "Clear":
		text += "\nüåû –ú–æ–∂–Ω–∞ –∑–∞—Å–º–∞–≥–∞—Ç–∏, –∞–ª–µ –Ω–µ –ø–µ—Ä–µ–≥—Ä—ñ–≤–∞–π—Å—è."
	case "Thunderstorm":
		text += "\n‚õà –ö—Ä–∞—â–µ –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç–∏ –∑ –¥–æ–º—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏."
	case "Clouds":
		text += "\nüå´ –Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏—Ö –¥—É–º–æ–∫ –ø—Ä–æ —Å–µ–Ω—Å –∂–∏—Ç—Ç—è."
	}

	return text, nil
}

func getDailyForecast(city, apiKey string) (string, error) {
	geoURL := fmt.Sprintf("http://api.openweathermap.org/geo/1.0/direct?q=%s&limit=1&appid=%s", city, apiKey)
	resp, err := http.Get(geoURL)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	var geoData []struct {
		Lat float64 `json:"lat"`
		Lon float64 `json:"lon"`
	}
	body, _ := io.ReadAll(resp.Body)
	json.Unmarshal(body, &geoData)
	if len(geoData) == 0 {
		return "", fmt.Errorf("–º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
	}

	lat, lon := geoData[0].Lat, geoData[0].Lon
	forecastURL := fmt.Sprintf("https://api.openweathermap.org/data/2.5/forecast?lat=%f&lon=%f&appid=%s&units=metric&lang=ua", lat, lon, apiKey)
	resp, err = http.Get(forecastURL)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, _ = io.ReadAll(resp.Body)
	var forecast ForecastResponse
	json.Unmarshal(body, &forecast)

	currentDate := time.Now().Format("2006-01-02")
	result := fmt.Sprintf("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –¥–ª—è %s:\n", city)

	for _, entry := range forecast.List {
		entryTime := time.Unix(entry.Dt, 0)
		if entryTime.Format("2006-01-02") == currentDate {
			desc := strings.ToLower(entry.Weather[0].Description)
			emoji := "üå°"
			switch {
			case strings.Contains(desc, "–¥–æ—â"):
				emoji = "üåß"
			case strings.Contains(desc, "—Å–Ω—ñ–≥"):
				emoji = "‚ùÑÔ∏è"
			case strings.Contains(desc, "—Å–æ–Ω—è—á–Ω–æ"):
				emoji = "‚òÄÔ∏è"
			case strings.Contains(desc, "—è—Å–Ω–æ"):
				emoji = "üåû"
			case strings.Contains(desc, "–≥—Ä–æ–∑–∞"):
				emoji = "‚õà"
			case strings.Contains(desc, "—Ö–º–∞—Ä"):
				emoji = "‚òÅÔ∏è"
			case strings.Contains(desc, "—Ç—É–º–∞–Ω"):
				emoji = "üå´"
			case strings.Contains(desc, "–≤—ñ—Ç–µ—Ä"):
				emoji = "üí®"
			}
			result += fmt.Sprintf("üïí %s: %s %.1f¬∞C ‚Äî %s\n",
				entryTime.Format("15:04"),
				emoji,
				entry.Main.Temp,
				entry.Weather[0].Description)
		}
	}

	if result == "" {
		return "", fmt.Errorf("–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
	}
	return result, nil
}

func startScheduler(bot *tgbotapi.BotAPI, apiKey string) {
	ticker := time.NewTicker(1 * time.Minute)
	for {
		<-ticker.C
		now := time.Now().In(time.FixedZone("Kyiv", 3*60*60))
		current := now.Format("15:04")

		mutex.Lock()
		for userID, times := range userSchedules {
			for _, t := range times {
				if t == current {
					if city, ok := userCities[userID]; ok {
						if forecast, err := getDailyForecast(city, apiKey); err == nil {
							msg := tgbotapi.NewMessage(userID, "üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞:\n"+forecast)
							bot.Send(msg)
						}
					}
				}
			}
		}
		mutex.Unlock()
	}
}
